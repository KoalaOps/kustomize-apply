name: 'Kustomize Apply'
description: 'Apply a built kustomize overlay to a Kubernetes cluster; waits only on workloads provided by Inspect'
author: 'KoalaOps'

branding:
  icon: 'upload-cloud'
  color: 'purple'

# Assumes Inspect ran before this step.
# - namespace and workloads_json come from Kustomize Inspect outputs.
inputs:
  overlay_dir:
    description: 'Path to kustomize overlay directory'
    required: true
  namespace:
    description: 'Kubernetes namespace to apply into (from Inspect)'
    required: true
  workloads_json:
    description: 'JSON array from Inspect: [{kind,name,namespace}]'
    required: false
    default: '[]'
  dry_run:
    description: 'Perform server-side dry run only'
    required: false
    default: 'false'
  validate:
    description: 'Validate manifests with kubectl client-side schema before apply'
    required: false
    default: 'true'
  server_side:
    description: 'Use Server-Side Apply'
    required: false
    default: 'false'
  wait:
    description: 'Wait for provided workloads to become ready'
    required: false
    default: 'true'
  wait_timeout:
    description: 'Wait timeout in seconds'
    required: false
    default: '300'

outputs:
  applied_resources_json:
    description: 'kubectl apply output lines as JSON array (best-effort)'
    value: ${{ steps.apply.outputs.applied_resources_json }}

runs:
  using: 'composite'
  steps:
    - name: Check required tools
      shell: bash
      run: |
        set -euo pipefail
        for bin in kustomize kubectl jq; do
          if ! command -v "$bin" >/dev/null 2>&1; then
            echo "::error::Required tool '$bin' not found in PATH."
            exit 1
          fi
        done
        echo "✅ Tools present: kustomize, kubectl, jq"

    - name: Validate inputs
      shell: bash
      run: |
        set -euo pipefail
        OVERLAY="${{ inputs.overlay_dir }}"
        if [ ! -d "$OVERLAY" ] || [ ! -f "$OVERLAY/kustomization.yaml" ]; then
          echo "::error::overlay_dir invalid or missing kustomization.yaml: $OVERLAY"
          exit 1
        fi
        if [ -z "${{ inputs.namespace }}" ]; then
          echo "::error::namespace input is required (pass from Inspect)"
          exit 1
        fi
        echo "✅ overlay_dir and namespace look good"

    - name: Build Kustomize manifests
      shell: bash
      run: |
        set -euo pipefail
        echo "🔨 kustomize build: ${{ inputs.overlay_dir }}"
        if ! kustomize build "${{ inputs.overlay_dir }}" > /tmp/manifests.yaml 2> /tmp/kustomize.err; then
          echo "::error::kustomize build failed"
          sed -n '1,120p' /tmp/kustomize.err || true
          exit 1
        fi
        echo "✅ Built manifests to /tmp/manifests.yaml"

    - name: Validate (client-side)
      if: inputs.validate == 'true' && inputs.dry_run != 'true'
      shell: bash
      run: |
        set -euo pipefail
        echo "✅ Client-side schema validation"
        kubectl apply --validate=true --dry-run=client -f /tmp/manifests.yaml

    - name: Ensure namespace exists
      if: inputs.dry_run != 'true'
      shell: bash
      run: |
        set -euo pipefail
        NS="${{ inputs.namespace }}"
        echo "📁 Ensuring namespace: $NS"
        kubectl create namespace "$NS" --dry-run=client -o yaml | kubectl apply -f -

    - name: Apply
      id: apply
      shell: bash
      run: |
        set -euo pipefail
        NS="${{ inputs.namespace }}"
        DRY="${{ inputs.dry_run }}"
        SSA="${{ inputs.server_side }}"

        CMD=(kubectl apply -f /tmp/manifests.yaml -n "$NS")
        [ "$SSA" = "true" ] && CMD+=(--server-side)
        if [ "$DRY" = "true" ]; then
          echo "🔍 Server-side dry run"
          CMD+=(--dry-run=server)
        else
          echo "🚀 Applying manifests"
        fi

        "${CMD[@]}" | tee /tmp/apply.out

        # Best-effort JSON summary of apply results
        jq -R -s -c 'split("\n") | map(select(length>0))' /tmp/apply.out > /tmp/apply.json || echo "[]">/tmp/apply.json
        echo "applied_resources_json=$(cat /tmp/apply.json)" >> "$GITHUB_OUTPUT"
